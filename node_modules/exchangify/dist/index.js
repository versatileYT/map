"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = __importDefault(require("http"));
const ExchangeRate_1 = require("./ExchangeRate");
function exchange(amount, from, to, fixedRate) {
    return __awaiter(this, void 0, void 0, function* () {
        if (from === to)
            return amount;
        if (fixedRate)
            return amount / fixedRate;
        const exchangeRates = yield rates();
        const rateFrom = rateByISO(from, exchangeRates);
        const rateTo = rateByISO(to, exchangeRates);
        return (amount / rateTo) * rateFrom;
    });
}
exports.exchange = exchange;
function rates() {
    return new Promise((resolve, reject) => {
        http_1.default.get("http://api.hnb.hr/tecajn/v2", (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
            });
            res.on("end", () => {
                const response = JSON.parse(data);
                response.push(ExchangeRate_1.ExchangeRateHRK);
                resolve(response);
            });
        }).on("error", (error) => {
            reject(error);
        });
    });
}
exports.rates = rates;
function rate(from, to) {
    return __awaiter(this, void 0, void 0, function* () {
        const exchangeRates = yield rates();
        const rateFrom = rateByISO(from, exchangeRates);
        const rateTo = rateByISO(to, exchangeRates);
        return (1 / rateFrom) * rateTo;
    });
}
exports.rate = rate;
function rateByISO(currencyIso, exchangeRates) {
    const exchangeRate = exchangeRates.find(v => v.valuta === currencyIso);
    if (!exchangeRate || !exchangeRate.srednji_tecaj) {
        throw new Error(`Currency '${currencyIso}' is not supported`);
    }
    return parseFloat(exchangeRate.srednji_tecaj.replace(",", "."));
}
exports.rateByISO = rateByISO;
//# sourceMappingURL=index.js.map